// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/entries/create": {
            "post": {
                "description": "Create entry.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "entries"
                ],
                "summary": "Create entry.",
                "parameters": [
                    {
                        "description": "entry info",
                        "name": "entry",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_entry_delivery.CreateEntryIn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success create entry",
                        "schema": {
                            "$ref": "#/definitions/internal_entry_delivery.CreateEntryOut"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "404": {
                        "description": "item is not found",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "422": {
                        "description": "unprocessable entity",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/me/clear_data": {
            "delete": {
                "description": "Clear all user data.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Clear all user data.",
                "responses": {
                    "200": {
                        "description": "success create project"
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/me/entries": {
            "get": {
                "description": "Get my entries or get my entries for a day",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "entries"
                ],
                "summary": "Get my entries.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "day for events in YYYY-MM-DD format",
                        "name": "day",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success create entry",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/internal_entry_delivery.EntryOut"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/me/projects": {
            "get": {
                "description": "Get my projects or get my projects for a day",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Get my projects.",
                "responses": {
                    "200": {
                        "description": "success get projects",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/internal_project_delivery.ProjectOut"
                            }
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/me/projects/stat": {
            "get": {
                "description": "Get project stats",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Get project stats.",
                "parameters": [
                    {
                        "type": "string",
                        "description": "RFC3339 format",
                        "name": "time_start",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "RFC3339 format",
                        "name": "time_end",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/internal_project_delivery.ProjectsStatOut"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/me/projects/{id}/stat": {
            "get": {
                "description": "Get project entries stat",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Get project entries stat.",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "project ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "RFC3339 format",
                        "name": "time_start",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "RFC3339 format",
                        "name": "time_end",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success",
                        "schema": {
                            "$ref": "#/definitions/internal_project_delivery.ProjectEntriesStatOut"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        },
        "/projects/create": {
            "post": {
                "description": "Create project.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "projects"
                ],
                "summary": "Create project.",
                "parameters": [
                    {
                        "description": "project info",
                        "name": "project",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_project_delivery.CreateProjectIn"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "success create project",
                        "schema": {
                            "$ref": "#/definitions/internal_project_delivery.CreateProjectOut"
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "422": {
                        "description": "unprocessable entity",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/echo.HTTPError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "echo.HTTPError": {
            "type": "object",
            "properties": {
                "message": {}
            }
        },
        "internal_entry_delivery.CreateEntryIn": {
            "type": "object",
            "required": [
                "project_id",
                "time_end",
                "time_start"
            ],
            "properties": {
                "name": {
                    "type": "string"
                },
                "project_id": {
                    "type": "integer"
                },
                "time_end": {
                    "type": "string"
                },
                "time_start": {
                    "type": "string"
                }
            }
        },
        "internal_entry_delivery.CreateEntryOut": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "internal_entry_delivery.EntryOut": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "project_id": {
                    "type": "integer"
                },
                "project_name": {
                    "type": "string"
                },
                "time_end": {
                    "type": "string"
                },
                "time_start": {
                    "type": "string"
                }
            }
        },
        "internal_project_delivery.CreateProjectIn": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "name": {
                    "type": "string"
                }
            }
        },
        "internal_project_delivery.CreateProjectOut": {
            "type": "object",
            "required": [
                "id"
            ],
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "internal_project_delivery.ProjectEntriesStat": {
            "type": "object",
            "properties": {
                "duration_in_sec": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "percent_duration": {
                    "type": "number"
                }
            }
        },
        "internal_project_delivery.ProjectEntriesStatOut": {
            "type": "object",
            "properties": {
                "entries": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_project_delivery.ProjectEntriesStat"
                    }
                },
                "total_duration_in_sec": {
                    "type": "number"
                }
            }
        },
        "internal_project_delivery.ProjectOut": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "internal_project_delivery.ProjectStat": {
            "type": "object",
            "properties": {
                "duration_in_sec": {
                    "type": "number"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "percent_duration": {
                    "type": "number"
                }
            }
        },
        "internal_project_delivery.ProjectsStatOut": {
            "type": "object",
            "properties": {
                "projects": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/internal_project_delivery.ProjectStat"
                    }
                },
                "total_duration_in_sec": {
                    "type": "number"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
